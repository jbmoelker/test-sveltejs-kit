{"version":3,"file":"index6.js","sources":["../../../node_modules/.pnpm/globrex@0.1.2/node_modules/globrex/index.js","../../../node_modules/.pnpm/globalyzer@0.1.0/node_modules/globalyzer/src/index.js","../../../node_modules/.pnpm/tiny-glob@0.2.8/node_modules/tiny-glob/sync.js","../src/api/adapt/prerender.js","../src/api/adapt/Builder.js","../src/api/adapt/index.js"],"sourcesContent":["const isWin = process.platform === 'win32';\nconst SEP = isWin ? `\\\\\\\\+` : `\\\\/`;\nconst SEP_ESC = isWin ? `\\\\\\\\` : `/`;\nconst GLOBSTAR = `((?:[^/]*(?:/|$))*)`;\nconst WILDCARD = `([^/]*)`;\nconst GLOBSTAR_SEGMENT = `((?:[^${SEP_ESC}]*(?:${SEP_ESC}|$))*)`;\nconst WILDCARD_SEGMENT = `([^${SEP_ESC}]*)`;\n\n/**\n * Convert any glob pattern to a JavaScript Regexp object\n * @param {String} glob Glob pattern to convert\n * @param {Object} opts Configuration object\n * @param {Boolean} [opts.extended=false] Support advanced ext globbing\n * @param {Boolean} [opts.globstar=false] Support globstar\n * @param {Boolean} [opts.strict=true] be laissez faire about mutiple slashes\n * @param {Boolean} [opts.filepath=''] Parse as filepath for extra path related features\n * @param {String} [opts.flags=''] RegExp globs\n * @returns {Object} converted object with string, segments and RegExp object\n */\nfunction globrex(glob, {extended = false, globstar = false, strict = false, filepath = false, flags = ''} = {}) {\n    let regex = '';\n    let segment = '';\n    let path = { regex: '', segments: [] };\n\n    // If we are doing extended matching, this boolean is true when we are inside\n    // a group (eg {*.html,*.js}), and false otherwise.\n    let inGroup = false;\n    let inRange = false;\n\n    // extglob stack. Keep track of scope\n    const ext = [];\n\n    // Helper function to build string and segments\n    function add(str, {split, last, only}={}) {\n        if (only !== 'path') regex += str;\n        if (filepath && only !== 'regex') {\n            path.regex += (str === '\\\\/' ? SEP : str);\n            if (split) {\n                if (last) segment += str;\n                if (segment !== '') {\n                    if (!flags.includes('g')) segment = `^${segment}$`; // change it 'includes'\n                    path.segments.push(new RegExp(segment, flags));\n                }\n                segment = '';\n            } else {\n                segment += str;\n            }\n        }\n    }\n\n    let c, n;\n    for (let i = 0; i < glob.length; i++) {\n        c = glob[i];\n        n = glob[i + 1];\n\n        if (['\\\\', '$', '^', '.', '='].includes(c)) {\n            add(`\\\\${c}`);\n            continue;\n        }\n\n        if (c === '/') {\n            add(`\\\\${c}`, {split: true});\n            if (n === '/' && !strict) regex += '?';\n            continue;\n        }\n\n        if (c === '(') {\n            if (ext.length) {\n                add(c);\n                continue;\n            }\n            add(`\\\\${c}`);\n            continue;\n        }\n\n        if (c === ')') {\n            if (ext.length) {\n                add(c);\n                let type = ext.pop();\n                if (type === '@') {\n                    add('{1}');\n                } else if (type === '!') {\n                    add('([^\\/]*)');\n                } else {\n                    add(type);\n                }\n                continue;\n            }\n            add(`\\\\${c}`);\n            continue;\n        }\n        \n        if (c === '|') {\n            if (ext.length) {\n                add(c);\n                continue;\n            }\n            add(`\\\\${c}`);\n            continue;\n        }\n\n        if (c === '+') {\n            if (n === '(' && extended) {\n                ext.push(c);\n                continue;\n            }\n            add(`\\\\${c}`);\n            continue;\n        }\n\n        if (c === '@' && extended) {\n            if (n === '(') {\n                ext.push(c);\n                continue;\n            }\n        }\n\n        if (c === '!') {\n            if (extended) {\n                if (inRange) {\n                    add('^');\n                    continue\n                }\n                if (n === '(') {\n                    ext.push(c);\n                    add('(?!');\n                    i++;\n                    continue;\n                }\n                add(`\\\\${c}`);\n                continue;\n            }\n            add(`\\\\${c}`);\n            continue;\n        }\n\n        if (c === '?') {\n            if (extended) {\n                if (n === '(') {\n                    ext.push(c);\n                } else {\n                    add('.');\n                }\n                continue;\n            }\n            add(`\\\\${c}`);\n            continue;\n        }\n\n        if (c === '[') {\n            if (inRange && n === ':') {\n                i++; // skip [\n                let value = '';\n                while(glob[++i] !== ':') value += glob[i];\n                if (value === 'alnum') add('(\\\\w|\\\\d)');\n                else if (value === 'space') add('\\\\s');\n                else if (value === 'digit') add('\\\\d');\n                i++; // skip last ]\n                continue;\n            }\n            if (extended) {\n                inRange = true;\n                add(c);\n                continue;\n            }\n            add(`\\\\${c}`);\n            continue;\n        }\n\n        if (c === ']') {\n            if (extended) {\n                inRange = false;\n                add(c);\n                continue;\n            }\n            add(`\\\\${c}`);\n            continue;\n        }\n\n        if (c === '{') {\n            if (extended) {\n                inGroup = true;\n                add('(');\n                continue;\n            }\n            add(`\\\\${c}`);\n            continue;\n        }\n\n        if (c === '}') {\n            if (extended) {\n                inGroup = false;\n                add(')');\n                continue;\n            }\n            add(`\\\\${c}`);\n            continue;\n        }\n\n        if (c === ',') {\n            if (inGroup) {\n                add('|');\n                continue;\n            }\n            add(`\\\\${c}`);\n            continue;\n        }\n\n        if (c === '*') {\n            if (n === '(' && extended) {\n                ext.push(c);\n                continue;\n            }\n            // Move over all consecutive \"*\"'s.\n            // Also store the previous and next characters\n            let prevChar = glob[i - 1];\n            let starCount = 1;\n            while (glob[i + 1] === '*') {\n                starCount++;\n                i++;\n            }\n            let nextChar = glob[i + 1];\n            if (!globstar) {\n                // globstar is disabled, so treat any number of \"*\" as one\n                add('.*');\n            } else {\n                // globstar is enabled, so determine if this is a globstar segment\n                let isGlobstar =\n                    starCount > 1 && // multiple \"*\"'s\n                    (prevChar === '/' || prevChar === undefined) && // from the start of the segment\n                    (nextChar === '/' || nextChar === undefined); // to the end of the segment\n                if (isGlobstar) {\n                    // it's a globstar, so match zero or more path segments\n                    add(GLOBSTAR, {only:'regex'});\n                    add(GLOBSTAR_SEGMENT, {only:'path', last:true, split:true});\n                    i++; // move over the \"/\"\n                } else {\n                    // it's not a globstar, so only match one path segment\n                    add(WILDCARD, {only:'regex'});\n                    add(WILDCARD_SEGMENT, {only:'path'});\n                }\n            }\n            continue;\n        }\n\n        add(c);\n    }\n\n\n    // When regexp 'g' flag is specified don't\n    // constrain the regular expression with ^ & $\n    if (!flags.includes('g')) {\n        regex = `^${regex}$`;\n        segment = `^${segment}$`;\n        if (filepath) path.regex = `^${path.regex}$`;\n    }\n\n    const result = {regex: new RegExp(regex, flags)};\n\n    // Push the last segment\n    if (filepath) {\n        path.segments.push(new RegExp(segment, flags));\n        path.regex = new RegExp(path.regex, flags);\n        path.globstar = new RegExp(!flags.includes('g') ? `^${GLOBSTAR_SEGMENT}$` : GLOBSTAR_SEGMENT, flags);\n        result.path = path;\n    }\n\n    return result;\n}\n\nmodule.exports = globrex;\n","'use strict';\n\nconst os = require('os');\nconst path = require('path');\nconst isWin = os.platform() === 'win32';\n\nconst CHARS = { '{': '}', '(': ')', '[': ']'};\nconst STRICT = /\\\\(.)|(^!|\\*|[\\].+)]\\?|\\[[^\\\\\\]]+\\]|\\{[^\\\\}]+\\}|\\(\\?[:!=][^\\\\)]+\\)|\\([^|]+\\|[^\\\\)]+\\)|(\\\\).|([@?!+*]\\(.*\\)))/;\nconst RELAXED = /\\\\(.)|(^!|[*?{}()[\\]]|\\(\\?)/;\n\n/**\n * Detect if a string cointains glob\n * @param {String} str Input string\n * @param {Object} [options] Configuration object\n * @param {Boolean} [options.strict=true] Use relaxed regex if true\n * @returns {Boolean} true if string contains glob\n */\nfunction isglob(str, { strict = true } = {}) {\n  if (str === '') return false;\n  let match, rgx = strict ? STRICT : RELAXED;\n\n  while ((match = rgx.exec(str))) {\n    if (match[2]) return true;\n    let idx = match.index + match[0].length;\n\n    // if an open bracket/brace/paren is escaped,\n    // set the index to the next closing character\n    let open = match[1];\n    let close = open ? CHARS[open] : null;\n    if (open && close) {\n      let n = str.indexOf(close, idx);\n      if (n !== -1)  idx = n + 1;\n    }\n\n    str = str.slice(idx);\n  }\n  return false;\n}\n\n\n/**\n * Find the static part of a glob-path,\n * split path and return path part\n * @param {String} str Path/glob string\n * @returns {String} static path section of glob\n */\nfunction parent(str, { strict = false } = {}) {\n  if (isWin && str.includes('/'))\n    str = str.split('\\\\').join('/');\n\n\t// special case for strings ending in enclosure containing path separator\n\tif (/[\\{\\[].*[\\/]*.*[\\}\\]]$/.test(str)) str += '/';\n\n\t// preserves full path in case of trailing path separator\n\tstr += 'a';\n\n\tdo {str = path.dirname(str)}\n\twhile (isglob(str, {strict}) || /(^|[^\\\\])([\\{\\[]|\\([^\\)]+$)/.test(str));\n\n\t// remove escape chars and return result\n\treturn str.replace(/\\\\([\\*\\?\\|\\[\\]\\(\\)\\{\\}])/g, '$1');\n};\n\n\n/**\n * Parse a glob path, and split it by static/glob part\n * @param {String} pattern String path\n * @param {Object} [opts] Options\n * @param {Object} [opts.strict=false] Use strict parsing\n * @returns {Object} object with parsed path\n */\nfunction globalyzer(pattern, opts = {}) {\n    let base = parent(pattern, opts);\n    let isGlob = isglob(pattern, opts);\n    let glob;\n\n    if (base != '.') {\n        glob = pattern.substr(base.length);\n        if (glob.startsWith('/')) glob = glob.substr(1);\n    } else {\n        glob = pattern;\n    }\n\n    if (!isGlob) {\n        base = path.dirname(pattern);\n        glob = base !== '.' ? pattern.substr(base.length) : pattern;\n    }\n\n    if (glob.startsWith('./')) glob = glob.substr(2);\n    if (glob.startsWith('/')) glob = glob.substr(1);\n\n    return { base, glob, isGlob };\n}\n\n\nmodule.exports = globalyzer;\n","const fs = require('fs');\nconst globrex = require('globrex');\nconst globalyzer = require('globalyzer');\nconst { join, resolve, relative } = require('path');\nconst isHidden = /(^|[\\\\\\/])\\.[^\\\\\\/\\.]/g;\n\nlet CACHE = {};\n\nfunction walk(output, prefix, lexer, opts, dirname='', level=0) {\n  const rgx = lexer.segments[level];\n  const dir = resolve(opts.cwd, prefix, dirname);\n  const files = fs.readdirSync(dir);\n  const { dot, filesOnly } = opts;\n\n  let i=0, len=files.length, file;\n  let fullpath, relpath, stats, isMatch;\n\n  for (; i < len; i++) {\n    fullpath = join(dir, file=files[i]);\n    relpath = dirname ? join(dirname, file) : file;\n    if (!dot && isHidden.test(relpath)) continue;\n    isMatch = lexer.regex.test(relpath);\n\n    if ((stats=CACHE[relpath]) === void 0) {\n      CACHE[relpath] = stats = fs.lstatSync(fullpath);\n    }\n\n    if (!stats.isDirectory()) {\n      isMatch && output.push(relative(opts.cwd, fullpath));\n      continue;\n    }\n\n    if (rgx && !rgx.test(file)) continue;\n    !filesOnly && isMatch && output.push(join(prefix, relpath));\n\n    walk(output, prefix, lexer, opts, relpath, rgx && rgx.toString() !== lexer.globstar && level + 1);\n  }\n}\n\n/**\n * Find files using bash-like globbing.\n * All paths are normalized compared to node-glob.\n * @param {String} str Glob string\n * @param {String} [options.cwd='.'] Current working directory\n * @param {Boolean} [options.dot=false] Include dotfile matches\n * @param {Boolean} [options.absolute=false] Return absolute paths\n * @param {Boolean} [options.filesOnly=false] Do not include folders if true\n * @param {Boolean} [options.flush=false] Reset cache object\n * @returns {Array} array containing matching files\n */\nmodule.exports = function (str, opts={}) {\n  if (!str) return [];\n\n  let glob = globalyzer(str);\n\n  opts.cwd = opts.cwd || '.';\n\n  if (!glob.isGlob) {\n    try {\n      let resolved = resolve(opts.cwd, str);\n      let dirent = fs.statSync(resolved);\n      if (opts.filesOnly && !dirent.isFile()) return [];\n\n      return opts.absolute ? [resolved] : [str];\n    } catch (err) {\n      if (err.code != 'ENOENT') throw err;\n\n      return [];\n    }\n  }\n\n  if (opts.flush) CACHE = {};\n\n  let matches = [];\n  const { path } = globrex(glob.glob, { filepath:true, globstar:true, extended:true });\n\n  path.globstar = path.globstar.toString();\n  walk(matches, glob.base, path, opts, '.', 0);\n\n  return opts.absolute ? matches.map(x => resolve(opts.cwd, x)) : matches;\n};\n","import fs, { createReadStream } from 'fs';\nimport { dirname, join, resolve as resolve_path } from 'path';\nimport { parse, resolve, URLSearchParams } from 'url';\nimport glob from 'tiny-glob/sync';\nimport { mkdirp } from '@sveltejs/app-utils/files';\n\nfunction clean_html(html) {\n\treturn html\n\t\t.replace(/<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/gm, '')\n\t\t.replace(/(<script[\\s\\S]*?>)[\\s\\S]*?<\\/script>/gm, '$1</' + 'script>')\n\t\t.replace(/(<style[\\s\\S]*?>)[\\s\\S]*?<\\/style>/gm, '$1</' + 'style>')\n\t\t.replace(/<!--[\\s\\S]*?-->/gm, '');\n}\n\nfunction get_href(attrs) {\n\tconst match = /href\\s*=\\s*(?:\"(.*?)\"|'(.*?)'|([^\\s>]*))/.exec(attrs);\n\treturn match && (match[1] || match[2] || match[3]);\n}\n\nfunction get_src(attrs) {\n\tconst match = /src\\s*=\\s*(?:\"(.*?)\"|'(.*?)'|([^\\s>]*))/.exec(attrs);\n\treturn match && (match[1] || match[2] || match[3]);\n}\n\nfunction get_srcset_urls(attrs) {\n\tconst results = [];\n\t// Note that the srcset allows any ASCII whitespace, including newlines.\n\tconst match = /srcset\\s*=\\s*(?:\"(.*?)\"|'(.*?)'|([^\\s>]*))/s.exec(attrs);\n\tif (match) {\n\t\tconst attr_content = match[1] || match[2] || match[3];\n\t\t// Parse the content of the srcset attribute.\n\t\t// The regexp is modelled after the srcset specs (https://html.spec.whatwg.org/multipage/images.html#srcset-attribute)\n\t\t// and should cover most reasonable cases.\n\t\tconst regex = /\\s*([^\\s,]\\S+[^\\s,])\\s*((?:\\d+w)|(?:-?\\d+(?:\\.\\d+)?(?:[eE]-?\\d+)?x))?/gm;\n\t\tlet sub_matches;\n\t\twhile ((sub_matches = regex.exec(attr_content))) {\n\t\t\tresults.push(sub_matches[1]);\n\t\t}\n\t}\n\treturn results;\n}\n\nconst OK = 2;\nconst REDIRECT = 3;\n\nexport async function prerender({ dir, out, log, config, force }) {\n\tconst seen = new Set();\n\n\tconst server_root = resolve_path(dir);\n\tconst app = require(`${server_root}/server/app.js`);\n\n\tasync function crawl(path) {\n\t\tif (seen.has(path)) return;\n\t\tseen.add(path);\n\n\t\tconst rendered = await app.render(\n\t\t\t{\n\t\t\t\thost: config.host,\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: {},\n\t\t\t\tpath,\n\t\t\t\tbody: null,\n\t\t\t\tquery: new URLSearchParams()\n\t\t\t},\n\t\t\t{\n\t\t\t\tonly_prerender: !force,\n\t\t\t\tget_static_file: file => createReadStream(join(config.files.assets, file))\n\t\t\t}\n\t\t);\n\n\t\tif (rendered) {\n\t\t\tconst response_type = Math.floor(rendered.status / 100);\n\t\t\tconst headers = rendered.headers;\n\t\t\tconst type = headers && headers['content-type'];\n\t\t\tconst is_html = response_type === REDIRECT || type === 'text/html';\n\n\t\t\tconst parts = path.split('/');\n\t\t\tif (is_html && parts[parts.length - 1] !== 'index.html') {\n\t\t\t\tparts.push('index.html');\n\t\t\t}\n\n\t\t\tconst file = `${out}${parts.join('/')}`;\n\t\t\tmkdirp(dirname(file));\n\n\t\t\tif (response_type === REDIRECT) {\n\t\t\t\tconst { location } = headers;\n\n\t\t\t\tlog.warn(`${rendered.status} ${path} -> ${location}`);\n\t\t\t\tfs.writeFileSync(\n\t\t\t\t\tfile,\n\t\t\t\t\t`<meta http-equiv=\"refresh\" content=\"0;url=${encodeURI(location)}\">`\n\t\t\t\t);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (response_type === OK) {\n\t\t\t\tlog.info(`${rendered.status} ${path}`);\n\t\t\t\tfs.writeFileSync(file, rendered.body); // TODO minify where possible?\n\t\t\t} else {\n\t\t\t\t// TODO should this fail the build?\n\t\t\t\tlog.error(`${rendered.status} ${path}`);\n\t\t\t}\n\n\t\t\tconst { dependencies } = rendered;\n\n\t\t\tif (dependencies) {\n\t\t\t\tfor (const path in dependencies) {\n\t\t\t\t\tconst result = dependencies[path];\n\t\t\t\t\tconst response_type = Math.floor(result.status / 100);\n\n\t\t\t\t\tconst is_html = result.headers['content-type'] === 'text/html';\n\n\t\t\t\t\tconst parts = path.split('/');\n\t\t\t\t\tif (is_html && parts[parts.length - 1] !== 'index.html') {\n\t\t\t\t\t\tparts.push('index.html');\n\t\t\t\t\t}\n\n\t\t\t\t\tconst file = `${out}${parts.join('/')}`;\n\t\t\t\t\tmkdirp(dirname(file));\n\n\t\t\t\t\tfs.writeFileSync(file, result.body);\n\n\t\t\t\t\tif (response_type === OK) {\n\t\t\t\t\t\tlog.info(`${result.status} ${path}`);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlog.error(`${result.status} ${path}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (is_html) {\n\t\t\t\tconst cleaned = clean_html(rendered.body);\n\n\t\t\t\tlet match;\n\t\t\t\tconst pattern = /<(a|img|link|source)\\s+([\\s\\S]+?)>/gm;\n\n\t\t\t\twhile ((match = pattern.exec(cleaned))) {\n\t\t\t\t\tlet hrefs = [];\n\t\t\t\t\tconst element = match[1];\n\t\t\t\t\tconst attrs = match[2];\n\n\t\t\t\t\tif (element === 'a' || element === 'link') {\n\t\t\t\t\t\threfs.push(get_href(attrs));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (element === 'img') {\n\t\t\t\t\t\t\threfs.push(get_src(attrs));\n\t\t\t\t\t\t}\n\t\t\t\t\t\threfs.push(...get_srcset_urls(attrs));\n\t\t\t\t\t}\n\n\t\t\t\t\threfs = hrefs.filter(Boolean);\n\n\t\t\t\t\tfor (const href of hrefs) {\n\t\t\t\t\t\tconst resolved = resolve(path, href);\n\t\t\t\t\t\tif (resolved[0] !== '/') continue;\n\n\t\t\t\t\t\tconst parsed = parse(resolved);\n\n\t\t\t\t\t\tconst parts = parsed.pathname.slice(1).split('/').filter(Boolean);\n\t\t\t\t\t\tif (parts[parts.length - 1] === 'index.html') parts.pop();\n\n\t\t\t\t\t\tconst file_exists =\n\t\t\t\t\t\t\t(parsed.pathname.startsWith(`/${config.appDir}/`) &&\n\t\t\t\t\t\t\t\tfs.existsSync(`${dir}/client/${parsed.pathname}`)) ||\n\t\t\t\t\t\t\tfs.existsSync(`${out}${parsed.pathname}`) ||\n\t\t\t\t\t\t\tfs.existsSync(`static${parsed.pathname}`) ||\n\t\t\t\t\t\t\tfs.existsSync(`static${parsed.pathname}/index.html`);\n\n\t\t\t\t\t\tif (file_exists) continue;\n\n\t\t\t\t\t\tif (parsed.query) {\n\t\t\t\t\t\t\t// TODO warn that query strings have no effect on statically-exported pages\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tawait crawl(parsed.pathname);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// TODO support other extensions, e.g. .svelte.md?\n\tconst entries = glob('**/*.svelte', { cwd: config.files.routes })\n\t\t.map((file) => {\n\t\t\tconst parts = file.split('/'); // TODO is this true for glob results on windows?\n\n\t\t\tif (parts.some((part) => part[0] === '_' || /\\[/.test(part))) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tparts[parts.length - 1] = parts[parts.length - 1].replace(/\\.svelte$/, '');\n\t\t\tif (parts[parts.length - 1] === 'index') parts.pop();\n\n\t\t\treturn `/${parts.join('/')}`;\n\t\t})\n\t\t.filter(Boolean);\n\n\tfor (const entry of entries) {\n\t\tawait crawl(entry);\n\t}\n}\n","import { copy } from '@sveltejs/app-utils/files';\nimport { prerender } from './prerender';\n\nexport default class Builder {\n\t#generated_files;\n\t#config;\n\n\tconstructor({ generated_files, config, log }) {\n\t\tthis.#generated_files = generated_files;\n\t\tthis.#config = config;\n\n\t\tthis.log = log;\n\t}\n\n\tcopy_client_files(dest) {\n\t\tcopy(`${this.#generated_files}/client`, dest, (file) => file[0] !== '.');\n\t}\n\n\tcopy_server_files(dest) {\n\t\tcopy(`${this.#generated_files}/server`, dest, (file) => file[0] !== '.');\n\t}\n\n\tcopy_static_files(dest) {\n\t\tcopy(this.#config.files.assets, dest);\n\t}\n\n\tasync prerender({ force = false, dest }) {\n\t\tawait prerender({\n\t\t\tout: dest,\n\t\t\tforce,\n\t\t\tdir: this.#generated_files,\n\t\t\tconfig: this.#config,\n\t\t\tlog: this.log\n\t\t});\n\t}\n}\n","import colors from 'kleur';\nimport relative from 'require-relative';\nimport { logger } from '../utils';\nimport Builder from './Builder';\n\nexport async function adapt(config) {\n\tconst [adapter, options] = config.adapter;\n\n\tif (!adapter) {\n\t\tthrow new Error('No adapter specified');\n\t}\n\n\tconst log = logger();\n\n\tconsole.log(colors.bold().cyan(`\\n> Using ${adapter}`));\n\n\tconst builder = new Builder({\n\t\tgenerated_files: '.svelte/build/optimized',\n\t\tconfig,\n\t\tlog\n\t});\n\n\tconst fn = relative(adapter);\n\tawait fn(builder, options);\n\n\tlog.success('done');\n}\n"],"names":["isWin","os","path","require$$0","fs","globalyzer","globrex","resolve_path","URLSearchParams","createReadStream","join","mkdirp","dirname","resolve","parse","glob","copy","logger","colors","relative"],"mappings":"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"}