'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var fs = require('fs');
var path = require('path');
var renderer = require('@sveltejs/app-utils/renderer');

function mkdirp(dir) {
	try {
		fs.mkdirSync(dir, { recursive: true });
	} catch (e) {
		if (e.code === 'EEXIST') return;
		throw e;
	}
}

function copy(
	from,
	to,
	filter = () => true
) {
	if (!filter(path.basename(from))) return [];

	const files = [];
	const stats = fs.statSync(from);

	if (stats.isDirectory()) {
		fs.readdirSync(from).forEach((file) => {
			files.push(...copy(path.join(from, file), path.join(to, file)));
		});
	} else {
		mkdirp(path.dirname(to));
		fs.copyFileSync(from, to);
		files.push(to);
	}

	return files;
}

async function builder({
	dir,
	manifest,
	log
}) {
	const lambda_directory = path.resolve('api');
	const static_directory = path.resolve('public');
	const server_directory = path.resolve(path.join('api', 'server'));

	log.info('Writing client application...');
	copy('static', static_directory);
	copy(path.resolve(dir, 'client'), path.join(static_directory, '_app'));

	log.info('Building lambda...');
	copy(path.resolve(__dirname, 'src'), lambda_directory);
	copy(path.join(path.resolve(dir), 'client.json'), path.join(server_directory, 'client.json'));
	const written_manifest = renderer.generate_manifest_module(manifest);
	const htmlPath = path.resolve('src', 'app.html');
	const appHtml = fs.readFileSync(htmlPath, 'utf-8');
	fs.writeFileSync(path.join(server_directory, 'manifest.js'), written_manifest);
	fs.writeFileSync(
		path.join(server_directory, 'template.js'),
		`module.exports = ${JSON.stringify(appHtml)};`
	);

	log.info('Prerendering static pages...');
	await renderer.prerender({
		force: true,
		dir,
		out: static_directory,
		manifest,
		log
	});

	log.info('Writing server application...');
	copy(path.resolve(dir, 'server'), server_directory);

	// TODO: Merge this, rather than write it
	log.info('Rewriting vercel configuration...');
	fs.writeFileSync(
		'vercel.json',
		JSON.stringify({
			public: true,
			build: {
				env: {
					NODEJS_AWS_HANDLER_NAME: 'handler'
				}
			},
			rewrites: [
				{
					source: '/(.*)',
					destination: '/api/render/'
				}
			]
		})
	);
}

exports.builder = builder;
